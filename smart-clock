#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_BME280.h>
#include <NTPClient.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define OLED_MOSI     13  // D7 for SPI MOSI (GPIO 13)
#define OLED_CLK      14  // D5 for SPI SCK (GPIO 14)
#define OLED_DC       2   // D4 for SPI DC (GPIO 2)
#define OLED_CS       15  // D8 for SPI CS (GPIO 15)
#define OLED_RESET    0   // D3 for SPI RESET (GPIO 0)

#define BMP_SDA       4   // D2 for I2C SDA (GPIO 4)
#define BMP_SCL       5   // D1 for I2C SCL (GPIO 5)

const char* ssid     = "----";
const char* password = "----";

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", -14400, 60000); // EST time zone (-14400 seconds offset)

Adafruit_BME280 bme; // I2C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &SPI, OLED_DC, OLED_RESET, OLED_CS); // SPI


void setup() {

  Serial.println("Initializing display...");
  if(!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  Serial.println("Display initialized successfully.");

  display.display();
  delay(1000);
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(32, 28);
  
  display.print("Connecting.");
  delay(1000);

  Serial.begin(115200);
  Wire.begin(BMP_SDA, BMP_SCL); // Initialize I2C for the sensor with custom pins
  WiFi.begin(ssid, password);


  Serial.println("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
    display.print(".");
  }
  Serial.println();
  Serial.println("Connected to WiFi");

  display.clearDisplay();

  timeClient.begin();

  Serial.println("Initializing BME280...");
  bool status = bme.begin(0x76); // Default I2C address for BME280
  if (!status) {
    Serial.println("Trying address 0x77...");
    status = bme.begin(0x77);
    if (!status) {
      Serial.println("Could not find a valid BME280 sensor, check wiring!");
      while (1);
    }
  }
  Serial.println("BME280 initialized successfully.");


  
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 28);
  display.println("Hello world!");
  display.display();

  delay(2000); // Pause for 2 seconds
  

}


const uint8_t sunCloudRainIcon[] PROGMEM = {
    B01000100, B01000000, // Top two rows: empty
    B00100100, B10000000, // Sun rays
    B00001110, B00000000, // More sun rays
    B00011111, B00000000, // Sun edge and space
    B01111111, B11111000, // Edge of sun and cloud starts
    B00011111, B00110000, // Cloud covering sun partially
    B00011000, B10001100, // More cloud and some sun
    B00100100, B01000010, // More cloud and some sun
    B01000010, B00100010, // Cloud internals
    B01000010, B00010010, // Cloud internals
    B01000000, B00001100, // Cloud finishing
    B00111111, B11110000, // Bottom of cloud
    B00000100, B00001000, // Raindrops start
    B00100101, B01010100, // More rain
    B00101000, B10001000, // More rain
    B00001001, B01000000  // Bottom rows: empty
};

const uint8_t humidityDropIcon[] PROGMEM = {
    B00000001, B00000000, // Top two rows: empty
    B00000001, B00000000, // Sun rays
    B00000010, B10000000, // More sun rays
    B00000010, B01000000, // Sun edge and space
    B00000100, B00100000, // Edge of sun and cloud starts
    B00001000, B00100000, // Cloud covering sun partially
    B00010000, B00010000, // More cloud and some sun
    B00010110, B01010000, // More cloud and some sun
    B00100110, B10001000, // Cloud internals
    B00100001, B00001000, // Cloud internals
    B00100010, B11001000, // Cloud finishing
    B00100100, B11001000, // Bottom of cloud
    B00010000, B00010000, // Raindrops start
    B00001100, B00110000, // More rain
    B00000011, B11000000, // More rain
    B00000000, B00000000  // Bottom rows: empty
};

String getFormattedDate(NTPClient& timeClient) {
    long epochTime = timeClient.getEpochTime();
    struct tm *ptm = gmtime((time_t *)&epochTime);

    int dayOfWeek = ptm->tm_wday; // Day of the week, Sunday = 0
    int day = ptm->tm_mday; // Day of the month
    int month = ptm->tm_mon + 1; // Month (January = 0)

    // Convert dayOfWeek to a string name
    const char* daysOfWeek[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
    char dateStr[20]; // Buffer to hold the formatted date

    // Format the date string as "Day MM/DD"
    sprintf(dateStr, "%s %02d/%02d", daysOfWeek[dayOfWeek], month, day);

    return String(dateStr); // Return the formatted date string
}


void drawTemp() {
  display.clearDisplay();

  timeClient.update();
  int currentHour = timeClient.getHours();
  int currentMinute = timeClient.getMinutes();
  int currentSecond = timeClient.getSeconds();
  String ampm = currentHour >= 12 ? "PM" : "AM";
  currentHour = currentHour % 12;
  currentHour = currentHour ? currentHour : 12; // handle the case of 0 hour
  
  int temperature = (int)bme.readTemperature();
  int tempF = (int)(((float)temperature * 1.8) + 32);
  int humidity = (int)bme.readHumidity();
  int pressure = (int)(bme.readPressure() / 100.0F);

  Serial.print("Temperature: ");
  Serial.println(temperature);
  Serial.print("Humidity: ");
  Serial.println(humidity);
  Serial.print("Pressure: ");
  Serial.println(pressure);


  /* DISPLAY SETTINGS */

  display.dim(true);
  //display.setFont(ArialMT_Plain_24);
  display.setTextSize(3);
  display.setCursor(14, 4);
  display.print(currentHour);
  display.print(":");
  if(currentMinute < 10) display.print("0");
  display.print(currentMinute);
  
  /*
  display.print(":");
  if(currentSecond < 10) display.print("0");
  display.print(currentSecond);
  display.print(" ");
  */


  /* AM / PM */
  display.setTextSize(1);
  display.print(ampm);


  /* Date */
  String currentDate = getFormattedDate(timeClient);
  display.setCursor(34, 29);
  display.print(currentDate);


  int line_icon_y = 40;
  int line_thp_y = 57;

  /* Icon 1 */
  display.drawBitmap(8, line_icon_y, sunCloudRainIcon, 16, 16, SSD1306_WHITE);
  display.setCursor(4, line_thp_y);
  display.print(tempF);
  display.write(0xF8);  // Print the degrees symbol
  display.print("F");


  /* Icon 2 */
  display.drawBitmap(48, line_icon_y + 1, humidityDropIcon, 16, 16, SSD1306_WHITE);
  display.setCursor(48, line_thp_y);
  display.print(humidity);
  display.print("%");


  /* Icon 3 */
  drawThermometer(95, line_icon_y);
  display.setCursor(84, line_thp_y);
  display.print(pressure);
  display.print(" hPa");


  /* RENDER */
  display.display();
}



void loop() {
  // The loop is intentionally left empty
  drawTemp();
  delay(1000);
}




void drawThermometer(int startX, int startY) {
  // Draw the outer bulb
  for (int x = startX + 5; x <= startX + 10; x++) {
    for (int y = startY + 12; y <= startY + 15; y++) {
      display.drawPixel(x, y, SSD1306_WHITE);
    }
  }

  // Draw the stem
  for (int x = startX + 7; x <= startX + 8; x++) {
    for (int y = startY + 2; y <= startY + 11; y++) {
      display.drawPixel(x, y, SSD1306_WHITE);
    }
  }

  // Draw the inner bulb
  for (int x = startX + 6; x <= startX + 9; x++) {
    for (int y = startY + 13; y <= startY + 14; y++) {
      display.drawPixel(x, y, SSD1306_WHITE);
    }
  }
}

void drawSunBehindCloudOutline(int startX, int startY) {
    // Draw the sun (circle outline)
    display.drawCircle(startX + 4, startY + 4, 4, SSD1306_WHITE); // Sun part visible behind the cloud

    // Draw rays of the sun
    for (int i = 0; i < 8; i++) {
        int angle = 45 * i;
        int x_end = startX + 4 + cos(angle * PI / 180) * 8;
        int y_end = startY + 4 + sin(angle * PI / 180) * 8;
        display.drawLine(startX + 4, startY + 4, x_end, y_end, SSD1306_WHITE);
    }

    // Draw the cloud using circles to simulate the outline
    display.drawCircle(startX + 5, startY + 8, 3, SSD1306_WHITE); // Left part of cloud
    display.drawCircle(startX + 9, startY + 8, 5, SSD1306_WHITE); // Center of cloud
    display.drawCircle(startX + 12, startY + 8, 3, SSD1306_WHITE); // Right part of cloud
}

void drawSunCloudRain(int startX, int startY) {
    // Draw the sun as a filled circle
    display.fillCircle(startX + 3, startY + 5, 3, SSD1306_WHITE); // Sun partially visible

    // Draw rays of the sun
    for (int i = 0; i < 8; i++) {
        int angle = 45 * i;
        int x_end = startX + 3 + cos(angle * PI / 180) * 6;
        int y_end = startY + 5 + sin(angle * PI / 180) * 6;
        display.drawLine(startX + 3, startY + 5, x_end, y_end, SSD1306_WHITE);
    }

    // Draw the cloud over the sun, with a black line for overlap
    display.fillCircle(startX + 8, startY + 5, 5, SSD1306_WHITE);
    display.fillCircle(startX + 12, startY + 5, 4, SSD1306_WHITE);
    display.fillRect(startX + 6, startY + 3, 10, 4, SSD1306_WHITE);
    display.fillRect(startX + 6, startY + 3, 10, 2, SSD1306_BLACK); // Black line to show cloud overlap

    // Draw raindrops as filled shapes
    display.fillCircle(startX + 10, startY + 10, 2, SSD1306_WHITE);
    display.fillCircle(startX + 6, startY + 12, 2, SSD1306_WHITE);
    display.fillCircle(startX + 14, startY + 14, 2, SSD1306_WHITE);
}

void drawSunBehindCloud(int startX, int startY) {
    // Draw the sun (circle)
    display.fillCircle(startX + 4, startY + 4, 4, SSD1306_WHITE); // Sun part visible behind the cloud

    // Draw rays of the sun
    for (int i = 0; i < 8; i++) {
        int angle = 45 * i;
        int x_end = startX + 4 + cos(angle * PI / 180) * 8;
        int y_end = startY + 4 + sin(angle * PI / 180) * 8;
        display.drawLine(startX + 4, startY + 4, x_end, y_end, SSD1306_WHITE);
    }

    // Draw the cloud
    display.fillRoundRect(startX + 2, startY + 2, 12, 8, 4, SSD1306_WHITE);
    display.fillCircle(startX + 3, startY + 6, 5, SSD1306_WHITE);
    display.fillCircle(startX + 10, startY + 5, 5, SSD1306_WHITE);
}

void drawDoubleWave(int startX, int startY) {
  int amplitude = 2; // Amplitude of the wave
  int waveHeight = 4; // Vertical space between the waves

  // Draw first wave line
  for (int x = 0; x < 16; x++) {
    int y = startY + amplitude + (sin(x * 0.4) * amplitude);
    display.drawPixel(startX + x, y, SSD1306_WHITE);
  }

  // Draw second wave line
  for (int x = 0; x < 16; x++) {
    int y = startY + waveHeight + amplitude + (sin(x * 0.4) * amplitude);
    display.drawPixel(startX + x, y, SSD1306_WHITE);
  }
}

void drawPressureGauge(int startX, int startY) {
    // Draw the outer circle of the gauge
    display.drawCircle(startX + 8, startY + 8, 7, SSD1306_WHITE);

    // Draw the inner circle to create a dial effect
    display.drawCircle(startX + 8, startY + 8, 2, SSD1306_WHITE);

    // Draw the needle of the gauge
    display.drawLine(startX + 8, startY + 8, startX + 12, startY + 4, SSD1306_WHITE);
}
